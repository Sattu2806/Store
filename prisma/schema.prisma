// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Project {
  id       Int      @id @default(autoincrement())
  Discipline String
  Area       String
  Date       DateTime
  Excavation Float
  FormWork   Float
  Rebar      Float
  Concrete  Float
  WeekNumber Int
  MonthName String
}

model MonthlyData {
  id     Int    @id @default(autoincrement())
  Type   String
  Month  String
  Value  Int
}

model resourceData {
  id     Int    @id @default(autoincrement())
  Group   String?
  category String
  Trade   String
  Year    Int
  Month   String
  Nos     Int
}

model TradeData {
  id     Int      @id @default(autoincrement())
  Type   String
  Trade  String
  Month  String
  Value  Int
}


model Group {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  Category       Category[]
  TotalScope TotalScope[]
  DailyProductivity DailyProductivity[]
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  groupId        Int
  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  TotalScope TotalScope[]
  DailyProductivity DailyProductivity[]
}

model TotalScope {
  id             Int      @id @default(autoincrement())
  groupId        Int
  categoryId     Int
  foundationType String
  totalFoundations Int
  excavationQty  Float
  rebarQty       Float
  concreteQty    Float

  group          Group    @relation(fields: [groupId], references: [id])
  category       Category @relation(fields: [categoryId], references: [id])

}

model DailyProductivity {
  id             Int      @id @default(autoincrement())
  groupId        Int
  categoryId     Int
  date           DateTime
  excavationQty  Float
  formWorkQty    Float
  rebarQty       Float
  concreteQty    Float
  WeekNumber      Int
  MonthName       String

  group          Group    @relation(fields: [groupId], references: [id])
  category       Category @relation(fields: [categoryId], references: [id])
}


model Image {
  id      Int      @id @default(autoincrement())
  url     String
  description String
  slideActive Boolean @default(false)
  groupId     Int
  ImageGroup    ImageGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ImageGroup {
  id      Int      @id @default(autoincrement())
  name    String
  Image   Image[]
}

model ProjectMileStone {
  id      Int      @id @default(autoincrement())
  description     String
  startDate       DateTime
  endDate         DateTime
  ProjectMileStoneInfo      ProjectMileStoneInfo[]
}

model ProjectMileStoneInfo {
  id             Int         @id @default(autoincrement())
  ProjectMileStoneId     Int
  month          Int?
  year           Int?
  barwidth       Float?
  barleftposition Float?
  ProjectMileStone       ProjectMileStone    @relation(fields: [ProjectMileStoneId], references: [id], onDelete: Cascade)         
}

enum TechnicalEvaluationandPRStatus {
  Preparation
  UnderApproval
  Completed
}

enum RFQStatus {
  Senttovendor
  Pending
}

enum ReceivedQuotationStatus {
  Vendorselected 
  Pending
}

enum POStatus {
  UnderPreparation
  Placed
  Pending
}

enum ManufacturingStatus {
  Started
  QualityTest 
  Pending
  Completed 
}

enum FinalInspectionStatus {
  Ongoing 
  Completed
  Pending
}

enum DeliveryToSiteStatus {
  UnderShipment
  CustomClearance
  Delivered 
  Pending
}


model LongLeadItem {
  id                   Int       @id @default(autoincrement())
  image                String
  country              String
  categoryId            Int
  LongLeadItemCategory LongLeadItemCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendor               String
  description          String
  qty                  Int
  unit                 String
  deliveryDate         DateTime
  requiredAtSiteDate   DateTime
  deliveryMode         String
  technicalEvaluation  TechnicalEvaluationandPRStatus?
  prStatus             TechnicalEvaluationandPRStatus?
  rfqStatus            RFQStatus?
  receivedQuotation    ReceivedQuotationStatus?
  poStatus             POStatus?
  manufacturingStatus  ManufacturingStatus?
  finalInspection      FinalInspectionStatus?
  deliveryToSite       DeliveryToSiteStatus?
}

model LongLeadItemCategory {
  id                   Int       @id @default(autoincrement())
  name                String
  LongLeadItems       LongLeadItem[]
}